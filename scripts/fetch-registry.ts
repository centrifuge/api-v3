#!/usr/bin/env tsx

/**
 * Fetch registry data at build time and save it as a TypeScript file.
 * This ensures the indexer has typed registry data without runtime network dependencies.
 */

import { writeFileSync } from 'fs'
import { join } from 'path'
import fetch from 'node-fetch'
import type { RegistryChain, RegistryAbis, Registry } from '../src/registry.types'

const REGISTRY_URL = process.env.REGISTRY_URL || 'https://registry.centrifuge.io/'
const REGISTRY_HASH = process.env.REGISTRY_HASH
const OUTPUT_FILE = join(process.cwd(), 'src', 'registry.generated.ts')

/**
 * Fetches the registry from the configured URL
 */
async function fetchRegistry() {
  const url = REGISTRY_HASH
    ? `https://centrifuge.mypinata.cloud/ipfs/${REGISTRY_HASH}`
    : REGISTRY_URL

  console.log(`Fetching registry from: ${url}`)

  const response = await fetch(url)

  if (!response.ok) {
    throw new Error(`Failed to fetch registry: ${response.statusText}`)
  }

  return await response.json()
}

/**
 * Generates TypeScript code with the registry data
 */
function generateTypeScriptFile(registry: Registry): string {
  return `/**
 * AUTO-GENERATED FILE - DO NOT EDIT
 * Generated by: pnpm run update-registry
 * Source: ${REGISTRY_HASH ? `https://centrifuge.mypinata.cloud/ipfs/${REGISTRY_HASH}` : REGISTRY_URL}
 * Generated at: ${new Date().toISOString()}
 */

import type { Registry } from './registry.types'

export const registry: Registry = ${JSON.stringify(registry, null, 2)} as const
`
}

/**
 * Main execution
 */
async function main() {
  try {
    const registry = await fetchRegistry() as Registry
    const tsContent = generateTypeScriptFile(registry)

    writeFileSync(OUTPUT_FILE, tsContent, 'utf-8')

    console.log(`âœ“ Registry successfully written to: ${OUTPUT_FILE}`)
    const mainnetCount = Object.keys(registry.chains.mainnet).length
    const testnetCount = Object.keys(registry.chains.testnet).length
    console.log(`  Chains: ${mainnetCount} mainnet, ${testnetCount} testnet`)
    console.log(`  ABIs: ${Object.keys(registry.abis || {}).length}`)
  } catch (error) {
    console.error('Error fetching registry:', error)
    process.exit(1)
  }
}

main()
