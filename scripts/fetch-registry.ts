#!/usr/bin/env tsx

/**
 * Fetch registry data at build time and save it as a TypeScript file.
 * This ensures the indexer has typed registry data without runtime network dependencies.
 */

import { writeFileSync } from "fs";
import { join } from "path";
import fetch from "node-fetch";
import { AbiItem } from "viem";

const REGISTRY_URL =
  process.env.REGISTRY_URL || "https://registry.centrifuge.io/";
const REGISTRY_HASH = process.env.REGISTRY_HASH;
const OUTPUT_FILE = join(process.cwd(), "src", "registry.generated.ts");

interface Registry {
  abis: Record<string, AbiItem[]>;
  chains: {
    mainnet: Record<string, unknown>;
    testnet: Record<string, unknown>;
  };
}

/**
 * Fetches the registry from the configured URL
 */
async function fetchRegistry(): Promise<Registry> {
  const url = REGISTRY_HASH
    ? `https://centrifuge.mypinata.cloud/ipfs/${REGISTRY_HASH}`
    : REGISTRY_URL;

  console.log(`Fetching registry from: ${url}`);

  const response = await fetch(url);

  if (!response.ok) {
    throw new Error(`Failed to fetch registry: ${response.statusText}`);
  }

  return (await response.json()) as Registry;
}

/**
 * Generates TypeScript code with the registry data
 */
function generateTypeScriptFile(registry: Registry): string {
  return `/**
 * AUTO-GENERATED FILE - DO NOT EDIT
 * Generated by: pnpm run update-registry
 * Source: ${
   REGISTRY_HASH
     ? `https://centrifuge.mypinata.cloud/ipfs/${REGISTRY_HASH}`
     : REGISTRY_URL
 }
 * Generated at: ${new Date().toISOString()}
 */

export default ${JSON.stringify(registry, null, 2)} as const
`;
}

/**
 * Main execution
 */
async function main() {
  try {
    const registry = await fetchRegistry();
    const tsContent = generateTypeScriptFile(registry);

    writeFileSync(OUTPUT_FILE, tsContent, "utf-8");

    console.log(`âœ“ Registry successfully written to: ${OUTPUT_FILE}`);
    const mainnetCount = Object.keys(registry.chains["mainnet"]).length;
    const testnetCount = Object.keys(registry.chains["testnet"]).length;
    console.log(`  Chains: ${mainnetCount} mainnet, ${testnetCount} testnet`);
    console.log(`  ABIs: ${Object.keys(registry.abis || {}).length}`);
  } catch (error) {
    console.error("Error fetching registry:", error);
    process.exit(1);
  }
}

main()
  .then(() => {
    console.log("Success");
  })
  .catch((error) => {
    console.error("Error fetching registry:", error);
    process.exit(1);
  });
